#!/usr/bin/env python3
"""
Test script để kiểm tra malware server
"""

import os
import sys
import time
import requests
import threading
from pathlib import Path

# Add bane to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'bane'))

def test_simple_malware_server():
    """Test simple Flask malware server"""
    print("🧪 Testing Simple Flask Malware Server...")
    
    try:
        import flask
        import threading
        
        # Create test malware directory
        malware_dir = "test_malware"
        if not os.path.exists(malware_dir):
            os.makedirs(malware_dir)
        
        # Create test file
        test_file = os.path.join(malware_dir, "test_payload.txt")
        with open(test_file, 'w') as f:
            f.write("This is a test malware payload for educational purposes only")
        
        # Create Flask app
        app = flask.Flask(__name__)
        
        @app.route('/')
        def index():
            files = [f for f in os.listdir(malware_dir) if os.path.isfile(os.path.join(malware_dir, f))]
            return {
                'status': 'running',
                'message': 'Malware Distribution Server',
                'available_files': files,
                'total_files': len(files)
            }
        
        @app.route('/<filename>')
        def download_file(filename):
            file_path = os.path.join(malware_dir, filename)
            if os.path.exists(file_path) and os.path.isfile(file_path):
                try:
                    return flask.send_file(file_path, as_attachment=True)
                except Exception as e:
                    return {'error': f'Download failed: {str(e)}'}, 500
            else:
                return {'error': 'File not found'}, 404
        
        # Start server in background thread
        def run_server():
            app.run(host='0.0.0.0', port=6666, debug=False, use_reloader=False, threaded=True)
        
        server_thread = threading.Thread(target=run_server, daemon=True)
        server_thread.start()
        
        print("✅ Flask malware server started on port 6666")
        print("⏳ Waiting 2 seconds for server to initialize...")
        time.sleep(2)
        
        # Test the server
        try:
            response = requests.get('http://localhost:6666/', timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"✅ Server response: {data}")
                print(f"📁 Available files: {data.get('available_files', [])}")
                return True
            else:
                print(f"❌ Server returned status code: {response.status_code}")
                return False
        except Exception as e:
            print(f"❌ Failed to test server: {e}")
            return False
            
    except ImportError:
        print("❌ Flask not available")
        return False
    except Exception as e:
        print(f"❌ Failed to start Flask server: {e}")
        return False

def test_bane_malware_server():
    """Test Bane malware server"""
    print("🧪 Testing Bane Malware Server...")
    
    try:
        from bane.scanners.botnet import Botnet_Malware_Download_Server
        
        # Create test malware directory
        malware_dir = "test_malware_bane"
        if not os.path.exists(malware_dir):
            os.makedirs(malware_dir)
        
        # Create test file
        test_file = os.path.join(malware_dir, "bane_payload.txt")
        with open(test_file, 'w') as f:
            f.write("This is a Bane malware payload for educational purposes only")
        
        # Create Bane malware server
        server = Botnet_Malware_Download_Server(
            malwares_folder=malware_dir,
            host='0.0.0.0',
            port=6667  # Use different port to avoid conflict
        )
        
        # Start server in background thread
        def run_bane_server():
            server.run()
        
        server_thread = threading.Thread(target=run_bane_server, daemon=True)
        server_thread.start()
        
        print("✅ Bane malware server started on port 6667")
        print("⏳ Waiting 2 seconds for server to initialize...")
        time.sleep(2)
        
        # Test the server
        try:
            response = requests.get('http://localhost:6667/bane_payload.txt', timeout=5)
            if response.status_code == 200:
                print(f"✅ Bane server working! Downloaded: {len(response.content)} bytes")
                return True
            else:
                print(f"❌ Bane server returned status code: {response.status_code}")
                return False
        except Exception as e:
            print(f"❌ Failed to test Bane server: {e}")
            return False
            
    except ImportError as e:
        print(f"❌ Bane malware server not available: {e}")
        return False
    except Exception as e:
        print(f"❌ Failed to start Bane server: {e}")
        return False

def test_port_availability():
    """Test if ports are available"""
    print("🧪 Testing Port Availability...")
    
    import socket
    
    ports_to_test = [6666, 6667, 6668]
    available_ports = []
    
    for port in ports_to_test:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.bind(('localhost', port))
            sock.close()
            available_ports.append(port)
            print(f"✅ Port {port} is available")
        except OSError:
            print(f"❌ Port {port} is in use")
    
    return available_ports

def cleanup_test_files():
    """Clean up test files"""
    print("🧹 Cleaning up test files...")
    
    import shutil
    
    test_dirs = ["test_malware", "test_malware_bane"]
    for test_dir in test_dirs:
        if os.path.exists(test_dir):
            shutil.rmtree(test_dir)
            print(f"✅ Removed {test_dir}")

def main():
    """Main test function"""
    print("🚀 MALWARE SERVER TEST SUITE")
    print("=" * 50)
    print("⚠️  For educational/research purposes only!")
    print("")
    
    # Test port availability
    available_ports = test_port_availability()
    if not available_ports:
        print("❌ No ports available for testing")
        return
    
    print("")
    
    # Test Flask server
    flask_success = test_simple_malware_server()
    
    print("")
    
    # Test Bane server
    bane_success = test_bane_malware_server()
    
    print("")
    print("=" * 50)
    print("📊 TEST RESULTS:")
    print(f"🔸 Flask Server: {'✅ PASS' if flask_success else '❌ FAIL'}")
    print(f"🔸 Bane Server: {'✅ PASS' if bane_success else '❌ FAIL'}")
    
    if flask_success or bane_success:
        print("\n✅ At least one malware server type is working!")
        print("💡 You can now use this configuration in hybrid_botnet_manager.py")
    else:
        print("\n❌ All malware server tests failed!")
        print("💡 Check dependencies and error messages above")
    
    # Keep servers running for manual testing
    if flask_success or bane_success:
        print("\n⏳ Servers will keep running for 30 seconds for manual testing...")
        print("🌐 Test URLs:")
        if flask_success:
            print("   - http://localhost:6666/ (Flask server)")
        if bane_success:
            print("   - http://localhost:6667/bane_payload.txt (Bane server)")
        
        time.sleep(30)
    
    # Cleanup
    cleanup_test_files()
    print("\n🏁 Test completed!")

if __name__ == "__main__":
    main()
